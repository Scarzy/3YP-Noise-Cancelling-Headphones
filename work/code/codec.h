#include <dsk6713_aic23.h>

#define AIC23_CODEC_ID 0

DSK6713_AIC23_Config aic23_config = {
	0x017,	//Left Line In Volume, No simultaneous update - unmuted - 0dB
	0x017,	//Right Line In Volume, No simultaneous update - unmuted - 0dB
	0x089,	//Left Headphone Volume, No simultaneous update - zero cross - 0dB
	0x089,	//Right Headphone Volume, No simultaneous update - zero cross - 0dB
	0x015,	//Analog Audio Path Control, Side tone disabled - DAC on - use unmuted Mic and boost it
	0x000,	//Digital Audio Path Control, DAC unmuted - no Deemphasis - ADC high pass enabled
	0x040,	//Power Down Control, CLK off
	0x001,	//Digital Audio Format, Slave - no DAC swap - 16bit input - MSB first left aligned
	0x081,	//Sample Rate Control, ADC 48KHz - DAC 48KHz
	0x001	//Digital Interface Activation, Active
};

MCBSP_Config mcbsp_data_config = {
	//MCBSP_FMKS(REGISTER, PORTION, VALUE);
	
	//SPCR - Serial Port Control Register
	//	31-26	RESERVED
	//	25	FREE	If set then serial clocks run during emulation halt.
	//	24	SOFT	If set then current operation completes before clocks disabled, else they stop instantly. Only valid if FREE not set.
	//	23	FRST	Frame Sync generator reset. If set then frame sync signal generated, else signal not generated.
	//	22	GRST	Sample Rate generator reset. If set sample rate signal generated as set in SRGR.
	//	21-20	XINTM	Transmit Interupt (XINT) Enable.
	//				0	XINT driven by XRDY, end of word and end of frame
	//				1	XINT generated by end of block and end of frame
	//				2	XINT generated by new frame sync
	//				3	XINT generated by XSYNCERR
	//	19	XSYNCERR Transmit Sync Error. If set then error has been detected.
	//	18	XEMPTY	Transmit Shift Register Empty. If set then XSR is empty.			STATUS
	//	17	XRDY	Transmitter Ready. If set then transmitter ready for new data in DXR.		STATUS
	//	16	XRST	Transmitter Reset. If not set then transmitter disabled.
	//	15	DLB	Digital Loop Back enable. If set then digital loop back enabled.
	//	14-13	RJUST	Receive sign extension and justify.
	//				0	RZF - Right justify, 0 fill
	//				1	RSE - Right justify, sign extend
	//				2	LZF - Left justify, 0 fill
	//				3	RESERVED
	//	12-11	CLKSTP	Clock Stop mode.
	//				0	Clock stop disabled
	//				1	RESERVED
	//				2	In SPI mode, clock starts with delay. Triggering edge depends on CLKXP.
	//				3	In SPI mode, clock starts without delay. Triggering edge depends on CLKXP.
	//	10-8	RESERVED
	//	7	DXENA	DX Enable. If set, DX is enabled.
	//	6	RESERVED
	//	5-4	RINTM	Receive Interupt (RINT) Enable.
	//				0	RINT driven by RRDY, end of word and end of frame
	//				1	RINT generated by end of block and end of frame
	//				2	RINT generated by new frame sync
	//				3	RINT generated by RSYNCERR
	//	3	RSYNCERR Receive Sync Error. If set then error has been detected.
	//	2	RFULL	Receive Shift Register Full. If set then RSR is full.				STATUS
	//	1	RRDY	Receiver Ready. If set then receiver ready for new data in DRR to be read.	STATUS
	//	0	RRST	Receiver Reset. If not set then receiver disabled.
	MCBSP_FMKS(SPCR, FREE, NO) |		//Do not run clock when halted
	MCBSP_FMKS(SPCR, SOFT, NO) |		//Clocks stop instantly
	MCBSP_FMKS(SPCR, FRST, YES) |		//Generate Frame Sync
	MCBSP_FMKS(SPCR, GRST, YES) |		//Generate Sample Rate
	MCBSP_FMKS(SPCR, XINTM, XRDY) |		//XINT driven by XRDY
	MCBSP_FMKS(SPCR, XSYNCERR, YES) |	//Error checking used
	MCBSP_FMKS(SPCR, XRST, YES) |		//Enable Transmitter
	MCBSP_FMKS(SPCR, DLB, NO) |		//No digital loop back
	MCBSP_FMKS(SPCR, RJUST, RZF) |		//Right justify, 0 fill
	MCBSP_FMKS(SPCR, CLKSTP, NODELAY) |	//No clock delay in SPI mode
	MCBSP_FMKS(SPCR, DXENA, OFF) |		//DX disabled
	MCBSP_FMKS(SPCR, RINTM, RRDY) |		//RINT driven by RRDY
	MCBSP_FMKS(SPCR, RSYNCERR, YES) |	//Error checking used
	MCBSP_FMKS(SPCR, RRST, YES),		//Enable Receiver
};

MCBSP_Config mcbsp_control_config = {
};

void codecSetup(void);

